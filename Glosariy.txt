1. List - абстрактний клас, описує основну функціональність структури листю
  Методи класу
  1) Size - повертає кількість елементів у структурі
  2) operator[] (int i) - повертає елемент на позиції i; помилка, якщо такої позиції не існує; віртуальний метод
  3) Push_back(T data) - вставляє новий елемент в кінець структури; віртуальний метод
  4) Pop_back() - видаляє елемент з кінця структури; віртуальний метод
  5) Clear() - видаляє всі елементи зі структури; віртуальний метод
  6) Peek() - повертає останній елемент в структурі; віртуальний метод
  7) Empty() - повертає булеве значення, яка вказує чи список пустий: true - список пустий, false - ні
  8) InsertionSort - сортує список метод вставки; віртуальний метод
  9) BubbleSort - сортує список метод бульбашки; ; віртуальний метод
  10) SelectionSort - сортує список методом вибору; віртуальний метод
  11) MergeSort - сортує список методом злиття; віртуальний метод
  12) QuickSort - швидке сортування; віртуальний метод
2. LinkedList - зв'язний список, наслідує клас List. Використовує вбудований клас Ndoe для позначення однієї позиції структури.
  Методи класу
  1) Set(T data, int i) - встановлює на позиції і елемент зі значенняи data; помилка якщо позиції і не існує
3. ArrayList - список-масив; наслідує клас List. Для збереження даних використовує масив. При створенні полю MAX_SIZE, яке позначає максимальний розмір масиву,
присвоюється значення 1. При додаванні нового елемента, який виходить за значення MAX_SIZE, розмір масиву збільшується вдвічі.
4. Figure - клас, який описує фігуру в Декартовій системі координат, як послідовність точок; для збереження точок використовує клас ArrayList
  Конструктори класу
  1) Figure() - створює фігуру без точок
  2) Figure(ArrayList<std::pair<double, double>> list) - створює фігуру на основі точок зі структури ArrayList
  3) Figure(LinkedList<std::pair<double, double>> list) - створює фігуру на основі точок зі структури LinkedList
  Перечислення класу
  1) ETriangleSideType - типи трикутника за сторонами
    а) ORDINARY - довільний; значення 0
    б) ISOSCELES - рівнобедренний; значення 1
    в) EQUILATERAL - рівносторонній; значення 2
    г) NOTATRIANGLE - фігура не трикутник; значення 4
  2) ETriangleAngleType - типи трикутника за кутами
    а) ACUTE - гострокутний; значення 0
    б) OBTUSE - тупокутний; значення 1
    в) RECTANGULAR - прямокутний; значення 2
    г) NOTATRIANGLE2 - фігура не трикутник; значення 3
  3) EQuadrangleType - типи чотирикутників
    а) SQUARE - квадрат; значення 0
    б) DIAMOND - ромб; значення 1
    в) RECTANGLE - прямокутник; значення 2
    г) PARALLELOGRAM - паралелограм; значення 3
    д) TRAPEZE - трапеція; значення 4
    е) ARBITARY - довільний; значення 5
    є) NOTAQUADRANGLE - фігура не чотирикутник; значення 6
  4) ETrapezeType - типи трапецій
    а) ARBITARYT - довільна; значення 0
    б) ISOSCELEST - рівнобедренна; значення 1
    в) RECTANGULART - прямокутна; значення 2
    г) RECTANGULART - фігура не трапеція; значення 3
  Методи класу
  1) operator [](int i) - повертає точку на позиції і
  2) add(std::pair<double, double> point) - додає до фігури точку point
  3) add(double x, double y) - додає до фігури точку з координатами (x, y)
  4) Count() - повертає кількість точок у фігурі
  5) Area() - повертає площу фігури
  6) Perimeter() - повертає периметер фігури
  7) isRegular() - повертає булеве значення; true - фігура правильна, false - ні
  8) TriangleSideType() - повертає значення типу ETriangleSideType, яке відповідє виду трикутника за сторонами
  9) TriangleAngleType() - повертає значення типу ETriangleAngleType, яке відповідє виду трикутника за кутами
  10) QuadrangleType() - повертає значення типу EQuadrangleType, яке відповідє виду чотирикутника
  11) TrapezeType() - повертає значення типу ETrapezeType, яке відповідє виду трапеції
  Статичні методи класу
  1) Distance(std::pair<double, double> p1, std::pair<double, double> p2) - повертає відстань між двома точками
  2) Angle(std::pair<double, double> p1, std::pair<double, double> p2, std::pair<double, double> p3) - повертає значення кута в точці p2
  
  
